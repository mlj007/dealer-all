package com.chexun.dealer.utils.common;import java.io.UnsupportedEncodingException;import javax.servlet.http.HttpServletRequest;/** *  * http parameter *  * @author acfear *  *  */public class HttpUtils {	/**	 * 	 * @param req	 * 	 * @param name	 * 	 * @param value	 */	public static void setAttribute(HttpServletRequest req, String name, String value) {		req.getSession(true).setAttribute(name, value);	}	/**	 *	 * 	 * @param req	 * 	 * @param name	 * 	 * @return	 */	public static String getAttribute(HttpServletRequest req, String name) {		Object obj = req.getSession(true).getAttribute(name);		if (obj != null)			return obj.toString();		else			return "";	}	/**	 *	 * 	 * @param req	 * 	 * @param name	 */	public static void removeAttribute(HttpServletRequest req, String name) {		Object obj = req.getSession(true).getAttribute(name);		if (obj != null)			req.getSession(true).removeAttribute(name);	}	/**	 *	 * 	 * @param req	 */	public static void setCharacterEncoding(HttpServletRequest req) {		try {			req.setCharacterEncoding("GBK");		} catch (UnsupportedEncodingException e) {			// e.printStackTrace();		}	}	/**	 *	 * 	 * 	 * 	 * @param HttpServletRequest	 * 	 * @param name	 * 	 * @return String	 */	public static String getString(HttpServletRequest req, String s) {		String v = req.getParameter(s);		if (v == null) {			return "";		} else {			return v.trim();		}	}	/**	 * 	 * ����int ��request.getParameter(name)���û���򷵻�0	 * 	 * 	 * 	 * @param HttpServletRequest	 * 	 * @param name	 * 	 * @return int	 */	public static int getInt(HttpServletRequest req, String s) {		return getInt(req, s, 0);	}	/**	 * 	 * ����int ��request.getParameter(name)���û���򷵻�defaultValue	 * 	 * 	 * 	 * @param HttpServletRequest	 * 	 * @param name	 * 	 * @param defaultValue	 * 	 * @return int	 */	public static int getInt(HttpServletRequest req, String s, int defaultValue) {		try {			return Integer.parseInt(req.getParameter(s));		} catch (Exception e) {			return defaultValue;		}	}	/**	 * 	 * �õ�	 * 	 * @param req	 * 	 * @param name	 * 	 * @param def	 * 	 * @return	 */	public static String getParam(HttpServletRequest req, String name, String def) {		String v = req.getParameter(name);		if (v == null) {			return def;		} else {			return v.trim();		}	}	/**	 * 	 * 	 * 	 * @param req	 * 	 * @param name	 * 	 * @return	 */	public static int[] getParamAsIntArray(HttpServletRequest req, String name) {		return getParamAsIntArray(req, name, -1);	}	public static int[] getParamAsIntArray(HttpServletRequest req, String name, int def) {		String[] v = req.getParameterValues(name);		if (v == null)			return new int[] {};		int[] arr = new int[v.length];		for (int i = 0; i < v.length; i++) {			try {				arr[i] = Integer.parseInt(v[i]);			} catch (Exception e) {				arr[i] = def;			}		}		return arr;	}	public static long[] getParamAsLongArray(HttpServletRequest req, String name) {		return getParamAsLongArray(req, name, -1);	}	public static long[] getParamAsLongArray(HttpServletRequest req, String name, int def) {		String[] v = req.getParameterValues(name);		if (v == null)			return new long[] {};		long[] arr = new long[v.length];		for (int i = 0; i < v.length; i++) {			try {				arr[i] = Long.parseLong(v[i]);			} catch (Exception e) {				arr[i] = def;			}		}		return arr;	}	public static int getParamAsInt(HttpServletRequest req, String name) {		return getParamAsInt(req, name, -1);	}	public static int getParamAsInt(HttpServletRequest req, String name, int def) {		try {			return Integer.parseInt(req.getParameter(name));		} catch (Exception e) {			return def;		}	}	public static long getParamAsLong(HttpServletRequest req, String name) {		return getParamAsLong(req, name, -1);	}	public static long getParamAsLong(HttpServletRequest req, String name, long def) {		try {			return Long.parseLong(req.getParameter(name));		} catch (Exception e) {			return def;		}	}	public static float getParamAsFloat(HttpServletRequest req, String name) {		return getParamAsFloat(req, name, -1);	}	public static float getParamAsFloat(HttpServletRequest req, String name, float def) {		try {			return Float.parseFloat(req.getParameter(name));		} catch (Exception e) {			return def;		}	}	public static double getParamAsDouble(HttpServletRequest req, String name) {		return getParamAsDouble(req, name, -1);	}	public static double getParamAsDouble(HttpServletRequest req, String name, double def) {		try {			return Double.parseDouble(req.getParameter(name));		} catch (Exception e) {			return def;		}	}	/**	 * @param request	 * 	 * @return	 */	public static String getIpAddr(HttpServletRequest request) {		String ip = request.getHeader("x-forwarded-for");		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("WL-Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getRemoteAddr();		}		if (ip != null && ip.length() > 15 && ip.lastIndexOf(",") > 0) {			ip = ip.substring(0, ip.lastIndexOf(","));		}		return ip;	}	public static String getIp(HttpServletRequest request) {		String ip = request.getHeader("Cdn-Src-Ip");		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("X-Forwarded-For");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("WL-Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("HTTP_CLIENT_IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("HTTP_X_FORWARDED_FOR");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("X-Real-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("HTTP_X_REAL_IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getRemoteAddr();		}		if ("0:0:0:0:0:0:0:1".equals(ip)) {			ip = "127.0.0.1";		}				System.out.println("-------begin");		System.out.println("Cdn-Src-Ip --> " + request.getHeader("Cdn-Src-Ip"));		System.out.println("X-Forwarded-For --> " + request.getHeader("X-Forwarded-For"));		System.out.println("Proxy-Client-IP --> " + request.getHeader("Proxy-Client-IP"));		System.out.println("WL-Proxy-Client-IP --> " + request.getHeader("WL-Proxy-Client-IP"));		System.out.println("HTTP_CLIENT_IP --> " + request.getHeader("HTTP_CLIENT_IP"));		System.out.println("HTTP_X_FORWARDED_FOR --> " + request.getHeader("HTTP_X_FORWARDED_FOR"));		System.out.println("X-Real-IP --> " + request.getHeader("X-Real-IP"));		System.out.println("HTTP_X_REAL_IP --> " + request.getHeader("HTTP_X_REAL_IP"));		System.out.println("RemoteAddr --> " + request.getRemoteAddr());		System.out.println("-------end");		return ip;	}}